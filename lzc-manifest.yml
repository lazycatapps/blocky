# app 的唯一 id,上架到商店需要保证不要冲突,尽量使用开发者自己的域名作为后缀.
package: cloud.lazycat.app.liu.blocky
# app 的版本
version: 0.27.0

name: Blocky
keyword: blocky,dns,ad-blocker,dns-proxy,adblock
description: 基于 Go 的快速 DNS 代理和广告拦截器

# 软件名称,会显示在启动器之类的地方
locales:
  zh:
    name: Blocky DNS 代理
    description: |
      ## Blocky - DNS 代理和广告拦截器

      **官方网站：** https://0xERR0R.github.io/blocky/
      **仓库地址：** https://github.com/lazycatapps/blocky.git

      Blocky 是一个用 Go 编写的 DNS 代理和广告拦截器，专为本地网络使用设计，提供全面的过滤和 DNS 管理功能。

      ## 主要功能

      - 🛡️ **DNS 查询拦截**：使用外部列表（广告拦截、恶意软件）进行过滤，支持白名单
      - 👨‍👩‍👧‍👦 **客户端分组**：基于客户端组的过滤（如儿童、智能家居设备）
      - 🔍 **深度检查**：拦截请求域名、响应 CNAME（深度 CNAME 检查）和响应 IP 地址
      - 🎯 **自定义解析**：特定域名的自定义 DNS 解析
      - ⚡ **性能优化**：可定制的 DNS 答案缓存，减少外部查询
      - 🔄 **条件转发**：条件转发到外部 DNS 服务器
      - 🔐 **安全协议**：支持 DNS over UDP/TCP、DNS over HTTPS (DoH)、DNS over TLS (DoT)
      - 🔒 **DNSSEC**：支持 DNSSEC 和 eDNS
      - 📊 **监控集成**：Prometheus 指标、Grafana 仪表板
      - 💾 **数据库日志**：支持 MySQL、PostgreSQL、TimescaleDB
      - 🚀 **轻量部署**：无状态架构（无需数据库），内存占用低

      ## 使用方法

      1. 启动应用后，Blocky 将自动启动并监听 UDP 53 端口
      2. **重要：** 需要通过局域网端口转发工具（Port Forwarder）将 LazyCat 的局域网 IP 的 TCP & UDP 53 端口映射到应用中，才能通过 LazyCat IP 来作为 DNS 服务器使用
      3. 将您的设备或路由器的 DNS 服务器设置为运行 Blocky 的主机 IP 地址
      4. 通过修改 LazyCat 上的 `/data/appvar/cloud.lazycat.app.liu.blocky/config/config.yml` 配置文件来自定义拦截规则和上游 DNS 服务器
      5. 重启应用使配置生效
      6. 访问管理界面（如果配置）查看统计信息和管理规则

      ## 配置说明

      配置文件位于 LazyCat 上的 `/data/appvar/cloud.lazycat.app.liu.blocky/config/config.yml`，您可以配置：
      - 上游 DNS 服务器
      - 拦截列表（广告、恶意软件等）
      - 白名单域名
      - 客户端分组规则
      - 缓存设置
      - 日志级别

      详细配置说明请参考：https://0xERR0R.github.io/blocky/configuration/

  en:
    name: Blocky DNS Proxy
    description: |
      ## Blocky - DNS Proxy and Ad-Blocker

      **Official Website:** https://0xERR0R.github.io/blocky/
      **Repository:** https://github.com/lazycatapps/blocky.git

      Blocky is a DNS proxy and ad-blocker written in Go, designed for local network use with comprehensive filtering and DNS management capabilities.

      ## Main Features

      - 🛡️ **DNS Query Blocking**: Filter using external lists (ad-block, malware) with allowlist support
      - 👨‍👩‍👧‍👦 **Client Groups**: Group-based filtering (e.g., Kids, Smart home devices)
      - 🔍 **Deep Inspection**: Block request domain, response CNAME (deep CNAME inspection) and response IP addresses
      - 🎯 **Custom Resolution**: Custom DNS resolution for specific domains
      - ⚡ **Performance**: Customizable DNS answer caching to reduce external queries
      - 🔄 **Conditional Forwarding**: Forward to external DNS servers conditionally
      - 🔐 **Secure Protocols**: Support for DNS over UDP/TCP, DNS over HTTPS (DoH), DNS over TLS (DoT)
      - 🔒 **DNSSEC**: DNSSEC and eDNS support
      - 📊 **Monitoring**: Prometheus metrics and Grafana dashboards
      - 💾 **Database Logging**: Support for MySQL, PostgreSQL, TimescaleDB
      - 🚀 **Lightweight**: Stateless architecture (no database required), low memory footprint

      ## Usage Instructions

      1. After starting the application, Blocky will automatically start and listen on UDP port 53
      2. **Important:** You need to use the LAN Port Forwarder tool to map TCP & UDP port 53 from your LazyCat LAN IP to this application in order to use it as a DNS server via the LazyCat IP
      3. Set your device or router's DNS server to the IP address of the host running Blocky
      4. Customize blocking rules and upstream DNS servers by editing `/data/appvar/cloud.lazycat.app.liu.blocky/config/config.yml` on your LazyCat
      5. Restart the application to apply configuration changes
      6. Access the management interface (if configured) to view statistics and manage rules

      ## Configuration

      The configuration file is located at `/data/appvar/cloud.lazycat.app.liu.blocky/config/config.yml` on your LazyCat. You can configure:
      - Upstream DNS servers
      - Blocking lists (ads, malware, etc.)
      - Allowlist domains
      - Client group rules
      - Cache settings
      - Log level

      For detailed configuration instructions, please refer to: https://0xERR0R.github.io/blocky/configuration/

# 软件本身的 license
license: https://choosealicense.com/licenses/apache-2.0/

# 软件的主页,会在商店等地方体现
homepage: https://github.com/0xERR0R/blocky

# lpk 的作者,会在商店等地方体现
author: liu

# application 作为一个特殊的 container 运行，对应的 service 名称为固定的`app`， 其他 service 可以通过此名称与 app 进行通讯
application:
  #是否存在后台任务， 若存在则系统不会对此 app 进行主动休眠等操作
  background_task: true

  # 期望的 app 域名，如果系统中已经有对应域名则会提示用户选择其他域名。 最终 app 分配到的域名以/lzcapp/run/app.subdomain 为准
  subdomain: blocky

  routes:
    # 前端静态文件服务
    - /=file:///lzcapp/pkg/content
    # 实际页面
    # - /=http://blocky:4000

  # TCP/UDP 服务配置
  ingress:
    - protocol: tcp                       # 协议类型 (tcp/udp)
      port: 4000                          # 目标端口号 (留空则使用入站端口)
      service: blocky                     # 服务容器名称 (留空则为 app)
      description: blocky 服务            # 服务描述
      publish_port: "4000"                # 入站端口号 (支持 "1000-50000" 范围)
      send_port_info: false               # 发送 uint16 端口信息 (little endian)
      yes_i_want_80_443: false            # 允许 80/443 流量 (绕过系统鉴权,慎用!)

    - protocol: tcp
      port: 53
      service: dns
      description: DNS 服务
      publish_port: "53"

    - protocol: udp
      port: 53
      service: dns
      description: DNS 服务
      publish_port: "53"

  # 健康检测配置
  health_check:
    test_url: http://blocky:4000
    start_period: 60s

  depends_on:
    - blocky

  # 是否启用多实例
  multi_instance: false

services:
  blocky:
    # lzc-cli appstore copy-image spoonest/blocky:latest
    image: registry.lazycat.cloud/liu/spx01/blocky:49ab8da37807a7e7
    environment:
      - TZ=Asia/Shanghai
      - BLOCKY_CONFIG_FILE=/config/config.yml
    binds:
      - /lzcapp/var/config:/config
    depends_on:
      - init-config

  init-config:
    # lzc-cli appstore copy-image alpine:latest
    image: registry.lazycat.cloud/liu/library/alpine:fa375aa75442b364
    setup_script: |
      CONFIG_DIR="/config"
      DEFAULT_DIR="/lzcapp/pkg/content/config"
      if [ ! -f /config/config.yml ]; then
        echo "No existing Master config found, copying default config."
        mkdir -p /config
        cp -f "${DEFAULT_DIR}/config.yml" "${CONFIG_DIR}/config.yml"
      else
        echo "Existing config found, skipping copy."
        cat /config/config.yml
      fi

      # Create a marker file to indicate initialization is complete
      touch /tmp/init-complete

      sleep infinity
    binds:
      - /lzcapp/var/config:/config
    health_check:
      test:
        - CMD
        - test
        - -f
        - /tmp/init-complete

unsupported_platforms:
  - ios
  - android
  - tvos
